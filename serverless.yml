service: st-cognito-serverless-demo

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'dev'}

functions:
  STTestAuth: #test Lambda
    handler: handlerTest.handler
    role: STLambdaRole
    events:
      - http:
          path: tester
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: STApiGatewayAuthorizer
  STHandleAuth: #auth Lambda
    handler: handlerAuth.handler
    role: STLambdaRole
    environment:
      COGNITO_USER_POOL_ID: 
        Ref: STCognitoUserPool
      COGNITO_APP_CLIENT_ID: 
        Ref: STCognitoUserPoolClient
    events:
      - http:
          path: auth
          method: any
          cors: true

resources:
  Resources:
    STCognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ST
    STCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: STWebApp
        GenerateSecret: false
        ExplicitAuthFlows: [USER_PASSWORD_AUTH]
        UserPoolId:
          Ref: "STCognitoUserPool"
    STLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: STLambdaRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
    STApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: ST
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [ STCognitoUserPool, Arn ]
        IdentitySource: method.request.header.Authorization
  Outputs:
    STCognitoUserPoolId:
      Description: "ST Cognito User Pool ID"
      Value:
        Ref: "STCognitoUserPool"
    STCognitoUserPoolClientId:
      Description: "ST Cognito User Pool Client ID"
      Value:
        Ref: "STCognitoUserPoolClient"